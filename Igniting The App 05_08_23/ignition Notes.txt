Package:
--------
Package is just like a module or some peice of code,
if we want to use package in ur code then we have to use package manager.


What is npm:
------------
if you are thinking that npm mean node package manager no its not, because no where in the 
documentation it is written that npm mean node package manager, npm work as a node package 
manager, it manages packages, works as a node package manager.

if we want to get npm into our app then for that we have to write a command called 
npm init

npm init -y will escape a lot of things so its better to go for npm init.

package.json is the thing which we are getting because of npm. npm init will get us 
package.json file.

npm is the standard repositry for all the packages, any package we need to include in your 
project we can use npm.

and sometime these package are known as dependencies and the most important dependencies is known as bundler.

Bundler
-------
Bundler basically bundles our app it packages our apps perfectly so that it can be shipped 
to production.

Webpack is also a bundler and it is used when we are creating an app by writting
npx create-react-app appname behind the scenes it is using webpack bundler

all the bundler almost do the same thing behind the scenes the way or working may be different.

Command for Adding node package manager to an project 
------------------------------------------------------
npm init
after writting npm init into our terminal we will get a new file in our project 
called package.json 

package.json
-------------
This json file is a configuration for our npm which include the name of the package,
version, description etc etc.

but all these things like version and all will be taken care by npm in the package.json file

its keeps the track of all the dependencies

How to use Parcel in our app 
------------------------------
we have to install it. 
npm install -D parcel

There are two types of dependencies/packages we can install 
1. dev dependencies
2. normal dependencies 

here i am install parcel but i want the dev dependencies

dev dependencies mean it is generally required in a development phase /development environment
normal dependencies are used in production 

here i install parcel from the npm as soon as it got install we get some new files callled 
package-lock.json and node_modules

package-lock.json
------------------
this file keeps the track of exact version.




npx
---
npx mean if something we want to execute then we can go for npx
if we want to install something we can write npm install packagename

but if we want to execute something then we can write npx
npx parcel index.html

parcel is creating an diffrent server and i am executing the parcel now .

React Install 
-------------
npm install react 

here i dont want dev dependencies, i just want react as a normal 
dependencies

React Dom Install
------------------
.npm install react-dom
.npm i react-dom (npm i is the short form of npm install)

"parcel": "^2.9.3" : this is the version is installed in our system
--------------------------------------------------------------------
suppose we have some mojor update 3.3.8 and we have a minor update 2.9.4
if we have used carat then automatically it will go for the minor version which is
2.9.4, i mean if we will put carat parcel will automatically update its  minor version 

but if we use ~ then automatically it will for the major version which is 
3.3.8

node_modules
--------------
it contains all the code that we fetched from npm, it is kind of database it contains the
actual data of the dependencies of those packages that our project need.

Every dependency will have its own package.json so we dont have one package.json in
our project.here in this project I have installed parcel so parcel has its own package.json
as well as it has its own dependency.

every package have its own dependency, every libraries has its own package.json this is 
known as transitive dependency.

node modules is a collection of packages with its dependencies.

no need of uploading or pushing node modules to your github repositry because its a very long files and its not needed
but anyways we will get that node_modules automatically when i will run a command npm install

i mean i can re-create node_modules by running a simple command npm install 
but these two files (package.json and package-lock.json) because of these two files
i can re-create node_modules.

Parcel
------
- dev build.
- local server (host your file)
- HMR - Hot Module Replacement (refreshing your page)
- file watching algorithim
- faster builds (parcel giving us a faster development because
of caching)
- image optimization 
- minification files
- Bundling
- Compressing
- React is making our app Fast but there are so many things 
being made by bundler which make the app first.
- remove unused code
- cleaning our code 
- Caching while development
- HTTPS On dev
- Consistent hashing algorithim 
- Zero Config.
- Tree Shaking mean removing unwanted code.


Browserlist 
-----------
For making it compatible with older version.
"browserslist": [
  ""
]

Impotant Notes:
---------------
const heading = React.createElement(
  'h1',
  {id:"title"},
  "Heading 1"
)

<h1 id="title">Heading 1</h1>

-----------------------------------------------------------------------
.Parcel is not doing everything on its own, parcel is using all other libraries

Q) Why do we need npm 
A) Because a react app is powered by a lot of things, a lot of packages suppose we have to 
minify it  or we have to optimize it or we have to bundle it so for that we need a lot of packages 
only react cannot do that for us so for that we need a lot of helper packages and we will get all that from npm.

. npm install -D parcel 
command to install parcel as dev dependencies
dependencies is basically all the packages that our project need.
after installing we will get a file called package-lock.json

. never add package-lock.json to .gitignore.
it locks the version / its keeps the track of exact version

. in the create-reat-app the bundler that is being used is webpack

npm doesn't have a fullform
all the libraries, utilities, packages comes from npm.

React doesn't making our app first its just make to an extent but there are lot of other 
things are also required which makes our app first , a lot of other packages are needed 
to make our app first. 

^  : carat sign will always update to minor version
~  : tilde sign will always update to major version 
"" : i dont want any updates for this package. 
for example if i have installed packages called parcel and in the package.json if i write like inside (double curly braces)
"2.8.4" then it will not take any updates for his packges 

its good to use carat we can also use tilde instead of carat but carat is
good.

. dependencies is basically all the packages that our project needs it means that my project
is dependant on something and parcel is one of the dependencies

.node_modules is a kind of database for npm, whenever we install something it gets installed inside the
node_modules. 
.in node_modules we can find a lot of packages/dependencies and how do we get so many packages 
when we are installing parcel bundler the time being taken to instal parcel in between that time all
our packaged wre being installed.

. react install command:
npm install react 
here i am not writting -D because i want to install in 
my global enironment as well.

. react do  install command 
npm install react-dom or npm i react-dom (both are same)

. ingnite our app command
npx parcel index.html
execute parcel and gave the entry point index.html

. browser-list help us to make our app compatible for older versions 
browser.

.dist folder keeps the files minified for us.
when we run the command npx parcel index.html at that time it create an faster 
development version of the project and serv+es it on the server. 

but when i want tell parcel to make a production build by using build command
npx parcel build index.html , it will create a lot of things it will minify your file 
and parcel will build all those production files into the dist folder

.parcel-cache should be put in our gitignore
because anything which can be auto generated/re-generated can be put into .gitignore

* Hot Module Replacement: 
This is done by parcel it mean whenever we are doing any changes it keeps track of all the changes are being made 
it keeps the track of all the files we are updating and then it automatically update the browser during runtime without
needing of refresing the whole page it just imporve the user experience.

any changes are being made if we are making any CSS changes that also will be applied automatically via HMR.

* File Watcher:
it will tell us in which file we are doing the change not only file in which module i hae done the changes 
with the helo of fileWatcher. Filewatchar is written in c++

so if wehave done any changes to index.html then due to the File Watcher it will get to know that yes some changes are being made
in the index.html and all these are being done by parcel these are one of the pluspoint of using parcel Bundler.


* when i type [npx parcel index.html] at that time it create a  faster development version of our 
project and serves it to the server

* when i type [npx parcel build index.html] at that time it create a production build for us 
it will create a lot of things , it will minify things for us and push it into the dist folder
so all the production files are being pushed into dist folder.

* Transitive dependency
-----------------------
when we want to create a prodution ready application it does a lot of thing such as minification, code cleaning
hot module replacement, tree shaking, so to do all those things we need a lot of packages/dependencies because react 
itself cannot do it and those dependencies are also dependent on other dependencies.